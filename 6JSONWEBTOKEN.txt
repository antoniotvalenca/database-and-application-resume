EXPLICAÇÃO

obs: npm i jsonwebtoken **********
obs: npm i lodash ******** para auxiliar no jsonwebtoken

-> Em suma, é o JWT (Json Web Token) é uma assinatura (em formato de token) que permite a autorização do usuário no sistema privado da aplicação
-> 1) Um usuário entra no site e tem acesso a homepage de login

   2) Ele digita seu usuário e senha
        -> vamos supor que ele digite corretamente
        -> seu login é AUTENTICADO
        
   3) Um token JWT (header (que contem as especificacoes da criptografia) + body (payload do usuário tipo seu nome email etc) + assinatura do servidor
   (uma senha secreta criada pelos proprios desenvolvedores em formato de HASH)) é gerado e AUTORIZA a entrada no lado privado da aplicação
   
->  Minimamente ele terá o ID do usuário autenticado ou da sessão (se estiver trabalhando com este conceito), mas pode conter muito mais do que isso, 
conforme a sua necessidade, embora guardar conteúdos “sensíveis” no seu interior não é uma boa ideia, pois como disse antes, ele não é criptografado (só
a parte da assinatura final, não o payload).

-> Melhor resumo da estrutura desse token:
  -> HEADER:
  O cabeçalho é composto por “alg”, que indica o algoritmo de hash utilizado (por exemplo o “HS256”) e por “typ”, que indica o tipo de token (neste caso 
  o “JWT”).
                  {
                    “alg”: “HS256”,
                    “typ”: “JWT”
                  }
                  
  -> BODY/PAYLOAD: 
  O corpo do token é aberto e pode ser utilizado para adicionar qualquer informação relevante a autenticação e autorização. No entanto, a RFC 7519
  define o padrão de algumas claims que podem ser utilizadas de maneira opcional.

  “iss” – Issuer (Emissor):  Responsável pela emissão do token.
  “sub” – Subject (Sujeito): A quem pertence o token

  “aud” – Audience (Destinatário): Aplicação que irá utilizar o token

  “exp” – Expiration Time (Tempo de expiração): Data de validade do token

  “nbf” – Not Before (Não antes): Data de início de validade do token, antes dela o token não deve ser aceito

  “iat” – Issued At (Emitido em): Data de emissão do token

  “jti” – JWT ID: Identificador único do token

  ex:
              {
                “sub”: “1234567890”,
                “name”: “John Doe”,
                “iat”: 1516239022
              }
_________________________________________________________________________________________________________________________________________________________

PRATICIDADE

-> Em termos práticos, quando um usuário se autentica no sistema (com usuário e senha), o servidor gera um token com data de expiração pra 
ele. Durante as requisições seguintes do cliente, o JWT é enviado no cabeçalho da requisição e, caso esteja válido, a API irá permitir acesso
aos recursos solicitados, sem a necessidade de se autenticar novamente.
_________________________________________________________________________________________________________________________________________________________

COMANDOS

-> jwt.sign({
  id: user.id,
  name: user.name,
  email: user.email
  }, process.env.TOKEN_SECRET, {
  expiresIn: process.env.TOKEN_EXPIRATION
  }) // isso aqui cria o token baseado no payload e no token secret
  
-> jwt.verify(token, process.env.TOKEN_SECRET) // vai descriptar o token (com o payload) e o token secret.
  
  
_________________________________________________________________________________________________________________________________________________________

APLICAÇÃO

***** SRC -> MIDDLEWARES

-> Primeiramente criamos o middleware do loginRequired
  -> é um middleware que vai checar se o usuário está logado baseado no seu JWT
  -> 
                module.exports = (req, res, next) => {
                const jwt = require('jsonwebtoken');

                const { authorization } = req.headers; // absorve o authorization do req.headers

                if (!authorization) {
                    return res.status(401).json({
                        errors: ['Login obrigatorio'],
                    });
                }

                const [, token] = authorization.split(' '); // cria um array com o split mas ignora a primeira parte e mantem so o token

                try {
                    const dados = jwt.verify(token, process.env.TOKEN_SECRET); // vai descriptar
                    const { id, email } = dados; // vai extrair id e email
                    req.userId = id;
                    req.userEmail = email;
                    next();
                } catch (e) {
                    return res.status(401).json({
                        errors: ['Token inspirado ou inválido'],
                    });
                }
            };
            
            
***** SRC- SERVICE

  -> funçao que sera usada dentro da funçao de login do controller
  -> vai logar o usuário (primeiro fazendo a autenticaçao c bcrypt)
  -> se a autenticaçao for bem sucedida, ele cria um jwt baseado nos dados do usuário e no token secret
  ->            const login = async (data) => {
                const user = await User.findOne({
                    where: {
                        email: data.email
                    },
                    raw: true,
                    attributes: ['id','name','email','password']
                });

                if(!user) {
                    throw new Error('Usuário ou senha inválidos');
                }

                const isValidPassword = compareSync(data.password, user.password);

                if (!isValidPassword) {
                  throw new Error('Usuário ou senha inválidos');
                }

                return jwt.sign({
                  id: user.id,
                  name: user.name,
                  email: user.email,
                },  process.env.TOKEN_SECRET , {
                  expiresIn: process.env.TOKEN_EXPIRATION
                });
                }
                
                
***** SRC - CONTROLLER    
  -> 
                const login = async (req, res) => { 
                    try {
                        const data = pick(req.data, ['email','password']); // vai pegar o objeto de requisiçao e criar um novo objeto 
                                                                            apenas com as chaves email e password
                        const token = await UserService.login(data); // vai criar o token com essas infos (se estiver tudo certo c elas)
  
                        return res.json(token);
                    } catch(error) {
                        return res.status(500).json({
                            message: 'Erro ao logar Usuários'
                        })
                    }
    }
